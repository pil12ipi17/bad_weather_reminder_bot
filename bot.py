import os
import telebot
from telebot import types
from dotenv import load_dotenv
import db
import requests
import datetime
from weather import get_weather
import schedule
import time
import threading
from timezonefinder import TimezoneFinder
import datetime
import pytz



# -------------------- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ --------------------
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

bot = telebot.TeleBot(TOKEN)

# -------------------- /start --------------------
@bot.message_handler(commands=['start'])
def start(message):
    tg_id = message.from_user.id
    chat_id = message.chat.id

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db.add_user(tg_id, chat_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_city = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥")
    btn_analytics = types.KeyboardButton("–ú–æ—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    markup.add(btn_city, btn_analytics)

    bot.send_message(chat_id,
                     "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–≥–æ–¥–Ω–∏–∫ üå§\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é:",
                     reply_markup=markup)

# -------------------- /help --------------------
@bot.message_handler(commands=['help'])
def help_cmd(message):
    chat_id = message.chat.id
    bot.send_message(chat_id,
                     "–ö–æ–º–∞–Ω–¥—ã:\n"
                     "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                     "/help - –ø–æ–º–æ—â—å\n"
                     "/setcity - –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")

# -------------------- /setcity --------------------
@bot.message_handler(commands=['setcity'])
def setcity(message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Moscow):")
    bot.register_next_step_handler(msg, save_city)

# -------------------- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ --------------------
def save_city(message):
    chat_id = message.chat.id
    tg_id = message.from_user.id
    city_name = message.text.strip()

    url = "http://api.openweathermap.org/geo/1.0/direct"
    params = {"q": city_name, "limit": 1, "appid": WEATHER_API_KEY}
    try:
        r = requests.get(url, params=params, timeout=10)
        r.raise_for_status()
        data = r.json()
        if not data:
            bot.send_message(chat_id, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        city_info = data[0]
        lat = city_info['lat']
        lon = city_info['lon']
        city_name = city_info['name']

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–π–º–∑–æ–Ω—É
        tf = TimezoneFinder()
        timezone_str = tf.timezone_at(lat=lat, lng=lon)

        # –°—á–∏—Ç–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ UTC
        tz_offset = None
        if timezone_str:
            tz = pytz.timezone(timezone_str)
            tz_offset = int(tz.utcoffset(datetime.datetime.utcnow()).total_seconds() / 3600)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        db.update_city(tg_id, city_name, lat, lon, timezone_str, tz_offset)

        bot.send_message(chat_id, f"–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {city_name} ‚úÖ\n"
                                  f"–¢–∞–π–º–∑–æ–Ω–∞: {timezone_str}, UTC{tz_offset:+d}")

        # –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≥–æ–¥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            w = get_weather(city_info['lat'], city_info['lon'])
            today_str = datetime.datetime.utcnow().strftime("%Y-%m-%d")

            send_msg = None
            if w['precipitation_type'] in ["rain", "snow"]:
                send_msg = f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ {city_info['name']}: {w['condition']} üåß‚ùÑÔ∏è"
            elif w['temp_max'] >= 25:
                send_msg = f"–°–µ–≥–æ–¥–Ω—è –≤ {city_info['name']} –∂–∞—Ä–∫–æ üî• {w['temp_max']}¬∞C"

            if send_msg:
                bot.send_message(chat_id, send_msg)
                db.save_weather_sample(tg_id, today_str,
                                       w['temp'], w['temp_max'], w['temp_min'],
                                       w['condition'], w['precipitation_type'],
                                       w['pop'], w['raw_json'])
                db.update_last_notify_date(tg_id, today_str)

        except Exception as e:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–≥–æ–¥—ã: {e}")

    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: {e}")


# -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏ Reply) --------------------
@bot.message_handler(func=lambda message: True)
def reply_buttons(message):
    text = message.text
    chat_id = message.chat.id

    if text == "–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥":
        setcity(message)
    elif text == "–ú–æ—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞":
        bot.send_message(chat_id, "–ü–æ–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞, –±—É–¥–µ—Ç –ø–æ–∑–∂–µ üìä")
    else:
        save_city(message)


def send_daily_notifications():
    users = db.get_all_users()
    now_utc = datetime.now(timezone.utc)

    for user in users:
        tg_id, city, lat, lon, tz_offset = user

        if not city or not lat or not lon or tz_offset is None:
            continue

        # –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_time = now_utc + timedelta(hours=tz_offset)

        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 08:00 (¬± 5 –º–∏–Ω—É—Ç –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏)
        if user_time.hour == 8 and user_time.minute < 5:
            try:
                weather = get_weather(lat, lon)
                notify = False
                message = f"–ü–æ–≥–æ–¥–∞ –≤ {city} —Å–µ–≥–æ–¥–Ω—è:\n"

                if weather["precipitation_type"] in ["rain", "snow"]:
                    notify = True
                    message += f"‚ùó –û–∂–∏–¥–∞—é—Ç—Å—è –æ—Å–∞–¥–∫–∏: {weather['precipitation_type']}\n"

                if weather["temp_max"] > 25:
                    notify = True
                    message += f"üî• –ñ–∞—Ä–∞: –¥–æ {weather['temp_max']}¬∞C\n"

                if notify:
                    bot.send_message(tg_id, message)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")

def run_scheduled_notifications():
    schedule.every().day.at("08:00").do(send_daily_notifications, bot=bot)

    while True:
        schedule.run_pending()
        time.sleep(30)  

# -------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ --------------------
if __name__ == "__main__":
    db.init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    threading.Thread(target=run_scheduled_notifications, daemon=True).start()

    bot.infinity_polling()

